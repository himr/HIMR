# ---------------------------------------------
# 33. Search in Rotated Sorted Array
# ---------------------------------------------
# Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
# 
# (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
# 
# You are given a target value to search. If found in the array return its index, otherwise return -1.
# 
# You may assume no duplicate exists in the array.
# 
# Your algorithm's runtime complexity must be in the order of O(log n).
# 
# Example 1:
# 
# Input: nums = [4,5,6,7,0,1,2], target = 0
# Output: 4
# Example 2:
# 
# Input: nums = [4,5,6,7,0,1,2], target = 3
# Output: -1
# 
# 来源：力扣（LeetCode）
# 链接：https://leetcode-cn.com/problems/search-in-rotated-sorted-array
# 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
# ---------------------------------------------
# 二分法查找先找旋转点，再找目标值

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        
        if not nums:return -1
        n = len(nums)
        left = 0
        right = len(nums) - 1
        
        while left < right:
            mid = left + (right - left) //2
            
            if nums[mid] > nums[right]:
                left = mid + 1
            else:
                right = mid
                
        t = left
        left = 0
        right = len(nums) - 1
        
        while left <= right:
            mid = (left + right) //2
            realmid = (mid + t) % n
            
            if nums[realmid] == target:
                return realmid
            elif nums[realmid] > target:
                right = mid - 1
            else:
                left = mid + 1
                
        return -1
