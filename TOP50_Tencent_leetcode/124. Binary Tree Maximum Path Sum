----------------------------------------
124. Binary Tree Maximum Path Sum
----------------------------------------
Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.

Example 1:

Input: [1,2,3]

       1
      / \
     2   3

Output: 6
Example 2:

Input: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

Output: 42

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/binary-tree-maximum-path-sum
----------------------------------------
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        if root == None:  
            return 0  
        Solution.maxsum = root.val  
        def solve(root):  
            if root == None:  
                return 0  
            sum,l,r = root.val,0,0  
            if root.left:  
                l = solve(root.left)  
                if l > 0: sum += l  
            if root.right:  
                r = solve(root.right)  
                if r > 0: sum += r  
            Solution.maxsum = max(Solution.maxsum,sum)  
            #print(Solution.maxsum)  
            return max(root.val,max(root.val + l,root.val+r))  
        solve(root)  
        return Solution.maxsum  
----------------------------------------
思路：先找
