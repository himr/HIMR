-----------------------------------
230. Kth Smallest Element in a BST
-----------------------------------
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note: 
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1
Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3
Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst
-----------------------------------
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def kthSmallest(self, root: TreeNode, k: int) -> int:
        width = [root]
        val = [root.val]
        i = 0
        while i < len(width):
            cur = width[i]
            if cur.left is not None:
                width.append(cur.left)
                val.append(cur.left.val)
            if cur.right is not None:
                width.append(cur.right)
                val.append(cur.right.val)
            i += 1
        val.sort()
        
        return val[k-1]
