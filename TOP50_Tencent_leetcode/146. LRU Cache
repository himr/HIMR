----------------------------------------------------------------------
146. LRU Cache
----------------------------------------------------------------------
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

The cache is initialized with a positive capacity.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/lru-cache
----------------------------------------------------------------------
# 字典记录
# 队列移动，确定目标

class LRUCache:

    def __init__(self, capacity: int):
        
        self.maxlength = capacity
        self.array = {}
        self.array_list = [] 

    def get(self, key: int) -> int:
        
        value = self.array.get(key)
        # 存在，移到队首
        if value is not None and self.array_list[0] is not key:
            index = self.array_list.index(key)
            self.array_list.pop(index)
            self.array_list.insert(0, key)

        value = value if value is not None else -1
        return value


    def put(self, key: int, value: int) -> None:
        
        # 重复
        if self.array.get(key) is not None:
            index = self.array_list.index(key)
            self.array.pop(key)
            self.array_list.pop(index)

        # 满
        if len(self.array_list) >= self.maxlength:
            key_t = self.array_list.pop(self.maxlength-1)
            self.array.pop(key_t)

        # 插入队首
        self.array[key] = value
        self.array_list.insert(0, key)


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
